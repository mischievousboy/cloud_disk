
   # CMakeList.txt: cloud_disk 的 CMake 项目，在此处包括源代码并定义
# 项目特定的逻辑。
#
cmake_minimum_required (VERSION 3.8)

project(cloud_disk)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}")

set(CMAKE_CXX_STANDARD 11)

set(DST_DIR ${CMAKE_SOURCE_DIR}/cgi_bin)

file(GLOB_RECURSE DIR_SRCS common/*.cpp common/*.c common/*.h)

include(cmake/common.cmake)

message(STATUS *******************************************************)
message(STATUS CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME})
message(STATUS CMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION})
message(STATUS CMAKE_HOST_SYSTEM_NAME=${CMAKE_HOST_SYSTEM_NAME})
message(STATUS CMAKE_GENERATOR=${CMAKE_GENERATOR})
message(STATUS CMAKE_CONFIGURATION_TYPES=${CMAKE_CONFIGURATION_TYPES})
message(STATUS CMAKE_C_COMPILER=${CMAKE_C_COMPILER})
message(STATUS CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER})
message(STATUS CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES=${CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES})
message(STATUS CMAKE_CXX_STANDARD_LIBRARIES=${CMAKE_CXX_STANDARD_LIBRARIES})
message(STATUS CMAKE_C_FLAGS=${CMAKE_C_FLAGS})
message(STATUS CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS})
message(STATUS CMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS})
message(STATUS CMAKE_MODULE_LINKER_FLAGS=${CMAKE_MODULE_LINKER_FLAGS})
message(STATUS CMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS})
message(STATUS CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR})
message(STATUS CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR})
message(STATUS CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
message(STATUS CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME})
message(STATUS CMAKE_FIND_LIBRARY_SUFFIXES=${CMAKE_FIND_LIBRARY_SUFFIXES})
message(STATUS CMAKE_STATIC_LIBRARY_PREFIX=${CMAKE_STATIC_LIBRARY_PREFIX})
message(STATUS CMAKE_VS_PLATFORM_TOOLSET=${CMAKE_VS_PLATFORM_TOOLSET})
message(STATUS CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
message(STATUS CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX})
message(STATUS CMAKE_INSTALL_COMPONENT=${CMAKE_INSTALL_COMPONENT})
message(STATUS CMAKE_CL_64=${CMAKE_CL_64})
message(STATUS BUILD_DEBUG=${BUILD_DEBUG})
message(STATUS RUNTIME=${RUNTIME})
message(STATUS BUILD_SHARED=${BUILD_SHARED})
message(STATUS MYSQL_LIB_DIR=${MYSQL_LIB_DIR})
message(STATUS DIR_SRCS=${DIR_SRCS})
message(STATUS *******************************************************)



#检查mysql的路径
find_package(MySQL REQUIRED)
message(STATUS MYSQL_LIBRARY=${MYSQL_LIBRARY})
message(STATUS MYSQL_INCLUDE_DIR=${MYSQL_INCLUDE_DIR})
message(STATUS MYSQL_LIB_DIR=${MYSQL_LIB_DIR})


#检查log4cplus
find_package(Log4CPLUS REQUIRED)
message(STATUS LOG4CPLUS_LIBRARY=${LOG4CPLUS_LIBRARY})
message(STATUS LOG4CPLUS_INCLUDE_DIR=${LOG4CPLUS_INCLUDE_DIR})
message(STATUS LOG4CPLUS_LIB_DIR=${LOG4CPLUS_LIB_DIR})

#检查redis-plus-plus
find_path(REDIS_PLUS_PLUS_HEADER sw)
find_library(REDIS_PLUS_PLUS_LIB redis++)
message(REDIS_PLUS_PLUS_HEADER=${REDIS_PLUS_PLUS_HEADER})
message(REDIS_PLUS_PLUS_LIB=${REDIS_PLUS_PLUS_LIB})
#通用头文件路径
include_directories(./common ./thirdparty ${MYSQL_INCLUDE_DIR} ${LOG4CPLUS_INCLUDE_DIR})

#库搜索目录
link_directories(${MYSQL_LIB_DIR} ${LOG4CPLUS_LIB_DIR})

string(JOIN " " SRC_DIRS common common/)
set(LIBCOMMON common)
add_subdirectory(src_cgi)
add_subdirectory(common)